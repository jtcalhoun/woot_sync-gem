#  Copyright 2012 Taco Stadium LLC. All rights reserved.
#
#  All information contained herein, including documentation and any related
#  computer programs, is confidential, proprietary, and protected by trade
#  secret or copyright law. Use, reproduction, modification or transmission in
#  whole or in part in any form or by any means is prohibited without prior
#  written consent of Taco Stadium LLC.

this.WootSync = (($) ->
  ajaxSettings =
    apiHost:   "<%= WootSync.config.client["api_host"] %>",
    clientId:  undefined,
    siteHost:  "<%= WootSync.config.client["site_host"] %>",
    version: "<%= WootSync::VERSION::STRING %>"

  ajaxSetup = (settings = {}) ->
    ajaxSettings = $.extend settings, ajaxSettings

  ajax = (path = "", options = {}) ->
    $.ajax $.extend options,
      url:  ajaxSettings.apiHost + path,
      data: ($.extend options.data ? {}, {client_id: ajaxSettings.clientId, v: ajaxSettings.version})

  getJSON = (path, data) ->
    return ajax path,
      dataType: "json",
      data:     data

  interval     = 60000 * 2 #minutes
  deferred     = undefined
  lastChange   = undefined
  lastResponse = 0
  collection   = {}
  staleTimeout = 60000 * 10 #minutes

  execute = ->
    if deferred and deferred.state() is "pending"
      getJSON("/sales.json", if lastResponse then {since: lastResponse.toISOString()} else undefined)
        .always (sales, status) =>
          changed = {}

          `switch (status) {
            case "success":
              lastChange = new Date();
            case "notmodified":
              lastResponse = new Date();
              $.each($.makeArray(sales), function (index, sale) {
                if (!$.isEmptyObject(sale)) {
                  changed[sale.shop.name] = $.extend(true, {
                    shop: {
                      index: index
                    }
                  }, sale);
                }
              });
              $.extend(collection, changed);
            default:
              if ($.now() - lastResponse > staleTimeout) {
                status = "stale";
              }
              deferred.notify(changed, status, collection)
              setTimeout(execute, interval);
              break;
          }`

          return

  WootSync = (settings) ->
    ajaxSetup settings

    unless deferred and deferred.state() is "pending"
      deferred = $.Deferred()

    execute()

    deferred.promise()

  $.extend WootSync,
    ajaxSetup: (settings) ->
      ajaxSetup settings
      return this

    getJSON:
      getJSON

    lastChange: ->
      lastChange

    lastResponse: ->
      lastResponse

    stop: ->
      deferred.resolve()

  return WootSync
) jQuery
